# -*- coding: utf-8 -*-
"""DIO_PandasPy.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1P9jV_K2UdOw1_-tlzZtiQGqyLVgxl6cJ

## **BIBLIOTECA PANDAS - INTRODUÇÃO**
"""

#Importando a biblioteca pandas
import pandas as pd

#dataframe: é um conjunto de dados parecido com planilha excel
df = pd.read_csv("/content/drive/MyDrive/datasets/Gapminder.csv", on_bad_lines='skip', sep=";")

#Visualizando as 5 primeiras linhas
df.head()

#Trocar nome das colunas
df = df.rename(columns={"country":"País", "continent":"Continente", "year":"Ano", "lifeExp":"Expectativa de vida", "pop":"População", "gdpPercap":"PIB"})

df.head() #É possível alterar a quantidade de primeiras linhas que vai mostrar, quando vazio, o padrão é de 5 linhas

#Total de linhas e colunas
df.shape

#Retorna o nome das colunas
df.columns

#O tipo de dado em cada coluna
#Object = string
df.dtypes

#Visualizando as últimas linhas
df.tail() #Funciona da mesma forma que o df.head(), porém esse lê as últimas 5 ou com o número passado no parametro

#Retorna informações estástiticas do conjunto de dados
df.describe()

#Retornar valores únicos dentro do dataframe (conjunto de dados)
df["Continente"].unique()

#Filtro dentro do dataframe
oceania_filter = df.loc[df["Continente"] == "Oceania"]
oceania_filter.head()

#Agrupamento de dados
df.groupby("Continente")["País"].nunique()
#Quantos países a gente tem por cada continente

#Para cada país, qual a expectativa de vida média
df_expect = df.head(5)
df_expect.groupby("Ano")["Expectativa de vida"].mean()

# mean() é utilizado para calcular a média, pode ser usado no groupby ou em uma coluna só
df["PIB"].mean()

# sum() é utilizado para calcular a soma
df["PIB"].sum()



"""## **TRABALHANDO COM PLANILHAS DO EXCEL**"""

import pandas as pd

#Leitura dos arquivos
df_aracaju = pd.read_excel("/content/drive/MyDrive/datasets/Aracaju.xlsx")
df_fortaleza = pd.read_excel("/content/drive/MyDrive/datasets/Fortaleza.xlsx")
df_natal = pd.read_excel("/content/drive/MyDrive/datasets/Natal.xlsx")
df_recife = pd.read_excel("/content/drive/MyDrive/datasets/Recife.xlsx")
df_salvador = pd.read_excel("/content/drive/MyDrive/datasets/Salvador.xlsx")

#Concatenar todos os arquivos em um só
df = pd.concat([df_aracaju,df_fortaleza,df_natal,df_recife,df_salvador])

df.head()

df.tail()

df.dtypes

# sample() pega uma amostra de algumas linhas aleatórias, é possível passar o
# número de linhas como parametros, com o padrão sendo 5
df.sample(5)

#Alterando o tipo de dado da coluna LojaID
df["LojaID"] = df["LojaID"].astype("object")

df.dtypes

#Consultando linhas que tenhma valores faltando
df.isnull().sum()

#Substituindo valores nulos pela média
df["Vendas"].fillna(df["Vendas"].mean(), inplace=True)

df.isnull().sum()

#Substituindo os valores nulos por zero
df["Vendas"].fillna(0, inplace=True)

#Apagando as linhas com valores nulos
df.dropna(inplace=True)

#Apagando as linhas com valores nulos com base em 1 coluna
df.dropna(subset=["Vendas"], inplace=True)

#Removendo linhas que estejam com valores faltantes em todas as colunas
df.dropna(how="all", inplace=True)

"""Criando novas colunas"""

df.head(10)

df['Receita'] = df["Vendas"].mul(df["Qtde"])

#Retornando o maior valor em "Receita"
df["Receita"].max()

#Retornando o menor valor em "Receita"
df["Receita"].min()

#Retorna o top 3 maiores na coluna "Receita" - No primeiro parametro, é possível alterar
# o número de linhas
df.nlargest(3, "Receita")

#Retorna o top 3 menores na coluna "Receita"
df.nsmallest(3, "Receita")

#Agrupamento por cidade
df.groupby("Cidade")["Receita"].sum()

#Ordenando o conjunto de dados
df.sort_values("Receita", ascending=False).head(10)



"""## **TRABLHANDO COM DATAS**"""

#Verificando o tipo de dado de cada coluna
df.dtypes

#Transformando coluna de data em data
df["Data"] = pd.to_datetime(df["Data"])

#Agrupamentp por ano
df.groupby(df["Data"].dt.year)["Receita"].sum()

#Criando uma nova coluna com o ano
df["Ano_Venda"] = df["Data"].dt.year

df.sample(5)

#Extraindo o mês e o dia
df["Mes_Venda"], df["Dia_Venda"] = (df["Data"].dt.month, df["Data"].dt.day)

df.sample(5)

#Retornando a data mais antiga
df["Data"].min()

#Calculando a diferença de dias
df["Diferença_dias"] = df["Data"] - df["Data"].min()

df.sample(5)

#Criando a coluna de trimestre
df["Trimestre"] = df["Data"].dt.quarter

df.sample(5)

#Filtrando as vendas de 2019 do mês de março
vendas_marco_19 = df.loc[(df["Data"].dt.year == 2019) & (df["Data"].dt.month == 3)]

vendas_marco_19



"""## **VISUALIZAÇÃO DE DADOS**"""



#Contagem
df["LojaID"].value_counts(ascending=False)

#Gráfico de barras verticais
df["LojaID"].value_counts(ascending=False).plot.bar();

#Gráfico de barras horizontais
df["LojaID"].value_counts(ascending=True).plot.barh();

#Gráfico de pizza
df.groupby(df["Data"].dt.year)["Receita"].sum().plot.pie();

#Total de vendas por cidade
df["Cidade"].value_counts()

#Adicionando um título e alternando o nome dos eixos
import matplotlib.pyplot as plt
df["Cidade"].value_counts().plot.bar(title="Total de vendas por cidade")
plt.xlabel("Cidade")
plt.ylabel("Total de vendas");

#Alterando a cor
df["Cidade"].value_counts().plot.bar(title="Total de vendas por cidade", color="lightblue")
plt.xlabel("Cidade")
plt.ylabel("Total de vendas");

#Alterando o estilo
plt.style.use("ggplot")

df.groupby(df["Mes_Venda"])["Qtde"].sum().plot(title="Total de produtos vendidos por mês")
plt.xlabel("Mês")
plt.ylabel("Total de produtos vendidos");
plt.legend()

df.groupby(df["Mes_Venda"])["Qtde"].sum()

df_2019 = df[df["Ano_Venda"] == 2019]

#Total de produtos vendidos por mês
df_2019.groupby(df_2019["Mes_Venda"])["Qtde"].sum().plot(marker = "v")
plt.xlabel("Mês")
plt.ylabel("Total de produtos vendidos")
plt.legend()

#Hisograma
plt.hist(df["Qtde"], color="lightblue");

#Gráfico de dispersão
plt.scatter(x=df_2019["Dia_Venda"], y=df_2019["Receita"]);

#Salvando em png
df_2019.groupby(df_2019["Mes_Venda"])["Qtde"].sum().plot(marker = "v")
plt.title("Quantidade de produtos vendidos por mês")
plt.xlabel("Mês")
plt.ylabel("Total de produtos vendidos")
plt.legend()
plt.savefig("grafico QTDE X MES.png")

